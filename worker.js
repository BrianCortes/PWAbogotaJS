self.addEventListener('install', function(event) {
  event.waitUntil(
    caches.open('bogotajs-cache').then(function(cache) {
      // Get the assets manifest so we can see what our js file is named
      // This is because webpack hashes it
      fetch('./asset-manifest.json')
        .then(response => {
          debugger;
          return response.json();
        })
        .then(assets => {
          console.log(assets);
          // Open a cache and cache our files
          // We want to cache the page and the main.js generated by webpack
          // We could also cache any static assets like CSS or images
          const urlsToCache = ['/', assets['app.js'], assets['app.css']];
          cache.addAll(urlsToCache);
          console.log('cached');
        });
    })
  );
});

self.addEventListener('activate', function(event) {
  var cacheWhitelist = ['bogotajs-cache'];

  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.map(function(cacheName) {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});

self.addEventListener('fetch', function(event) {
  // Ignore non-get request like when accessing the admin panel
  if (event.request.method !== 'GET') {
    return;
  }
  // Don't try to handle non-secure assets because fetch will fail
  // Here's where we cache all the things!
  event.respondWith(
    // Open the cache created when install
    caches.open('bogotajs-cache').then(function(cache) {
      // Go to the network to ask for that resource
      return fetch(event.request)
        .then(function(networkResponse) {
          // Add a copy of the response to the cache (updating the old version)
          // cache.put(event.request, networkResponse.clone());
          // Respond with it
          return networkResponse;
        })
        .catch(function() {
          // If there is no internet connection, try to match the request
          // to some of our cached resources
          return cache.match(event.request);
        });
    })
  );
});

if ('serviceWorker' in navigator) {
  debugger;
  fetch('./asset-manifest.json')
    .then(response => {
      return response.json();
    })
    .then(assets => {
      navigator.serviceWorker
        .register(assets['worker.js'])
        .then(
          function(registration) {
            console.log('congratulations');
          },
          function(err) {
            // registration failed :(
          }
        )
        .catch(function(err) {});
    });
} else {
  // Service worker  not support
}
